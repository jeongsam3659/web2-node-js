오후 6:38 2022-01-05

Node.js란?
 브라우저에서 Js를 가동할 수 있는걸 브라우저 밖에서도 실행할 수 있게끔 하는 프로그램.
- 노마드코더 -

//경로
C:\GitLog\Git\web2-node-js

---

	#1
web application
<<<
html
<<<
web Browser

web에서 html을 활용하여 web applicationd을 만든다.

이와 동일하게

	#2
Node.js application
<<<
js
<<<
Node.js runtime

Node.js runtime에서 js을 활용하여 Node.js application을 만든다.

---		---		---		---

	#3
window설치

	1.
https://nodejs.org/ko/
LTS를 다운로드 받는다고 설치 (설치경로 확인)

	2.
window + r  +cmd창을 표시

	3.
node -v 
버젼이 나오면 설치가 된걸 확인할 수 있다.
또는
node를 입력 후 간단한 js를 통해 설치된걸 확인 할 수 있다.
ex_)
console.log(1+3);

	4.
cmd node node파일을 입력하면 
node파일의 결과값이 cmd창에 출력된다.

---		---		---		---

	#4.
예제파일들을 실행구역에 복사하고

main.js에 해당 내용을 기입.
---
var http = require("http");
var fs = require("fs");
var app = http.createServer(function (request, response) {
    var url = request.url;
    if (request.url == "/") {
        url = "/index.html";
    }
    if (request.url == "/favicon.ico") {
        return response.writeHead(404);
    }
    response.writeHead(200);
    response.end(fs.readFileSync(__dirname + url));
});
app.listen(3000);
---
한뒤 node main.js로 실행. 브라우저 localhost:3000하면 해당 웹페이지가 가동된다.
cmd ctrl + c하면 node종료

---		---		---		---

	#5.
	__dirname + url
 
console.log();를 통해 역할파악
	#1. 출력
C:\GitLog\Git\인프런\node.js/index.html
C:\GitLog\Git\인프런\node.js/3.html

사용자가 요청할때마다(html나 css, js를 클릭시)
디렉토리 경로와 함께 파일명이 불려오고 fs.readFileSync가 읽어서
출력을 response.end에 위치시키는걸 알 수 있다.

response.end("fileName :" + url); 라고 변경하고 실행시

브라우저에
fileName :/3.html
만 출력되는걸 확인할 수 있다.

---		---		---		---

오후 3:08 2022-01-06
	#6.

 	DATA Type
폴더Syntax에 문법관련이 들어갈 예정.

	Number
JS에서 숫자는 다른 표시없는 숫자가 Number이다.
	
	String
'', ""로 문자를 묶으면 문자열이 된다.
글자수 확인 - string.length

	변수 Variable
a = 1;
js에서는 변수선언시 따로 타입선언 없어도 자동으로 적용.
과거에는 var
하지만 let(변수) / const(상수)를 붙혀주는게 좋다.

	Template Literal
	(과거)
	\ 
문자열 내에서 \는 TAB(탭)과 동일한 기능으로.
	\n\
줄바꿈을 나타내는 기호
	
	(현재)
	리터널 `(~ 과 같이있는 그레이브 엑센트)
ex_
`Dear ${client} 

Lorem ipsum dolor sit amet,consectetur adipisicing elit. ...`

변수는 ${변수} 또는 식을 ${1+2}.
이런식으로 따로 \n나 +변수+를 추가시키는 것없이 형태 그대로를 출력할 수 있게된다.

---		---		---		---

	#7. 	URL이해

http:// opentutoials.org:3000/main?id=HTML&page=12

	http - protocol
	통신규칙
사용자가 서버에 접속할때 어떤방식으로 통신할건지 규칙

	opentutoials.org
	호스트, 도메인
특정 주소를 가리킨다.

	:3000
	포트번호 
클라이언트가 접속할때 3000번 포트에 연결된 서버와 연결한다는뜻.

	main
	path
서버컴퓨터의 어떤? 디렉토리 어떤? 파일인지 가르키는 것.

	?id=HTML&page=12
	query string
시작은 ?로 하고
값 과 값사이에는 엔퍼센트(&)로 구분하고
키 과 값은 =으로 표시.(key=value)


#8. 	URL (1)
nodejs url parse query string

var queryData = url.parse(_url, true).query;
로 어떻게 구성되어있는지 확인.


	#11.	동적페이지
	1. resonse.write밑에
var template = `
 (1.html내용)
`
내용을 넣고 HTML이라고 표기되있는 타이틀과 h2부근을 ${queryData.id}을 교체후

	2. response.end(template);

	3. localhost:3000 창을 띄우면 1.html 비슷하게 나오고 ${}자리는 undefined로 표시된다.
 3000/?id=HTML 로 입력시 ${}는 HTML으로 바뀌는걸 확인할 수 있다.

	4. li에 담긴 a태그 경로를 수정하여.
	1.html > /?id=Html
	2.html > /?id=Css
	3.html > /?id=JavaScript
다시 실행보면 
${}자리가 해당 a태그를 클릭한 값대로 변화는걸 알 수있다.

	5. 변수를 좀더 알아보기 쉽게 재정의
var title = queryData.id,
${title}

	6. h1 a태그 경로를 "/" 로 수정. 이렇게 될시 첫번째 조건문에 해당됨.
첫번째 조건문( _url == "/" ) true일시
title = "Welcome"으로 수정 후 실행하면 h1태그에 Welcome이 뜨는걸 볼수 있다.

>> 이렇게 할시 하나하나html 수정하지 않고도 한곳만 변경하여 유지보수 및 재사용이 쉬워진다.


	#12.	CRUD
	Create
	Read
	Update
	Delete의 약자. 정보시스템을 다루는 핵심적 구성.

https://nodejs.dev/learn/reading-files-with-nodejs

const fs = require("fs");

**1	//구버젼
---
	
fs.readFile("sample.txt", function (err, data) {
	console.log(data);
});

---
	출력.
<Buffer 4c 6f 72 65 6d 20 69 70 73 75 6d 20 64 6f 6c 6f 72 20 73 69 74 20 61 6d 65 74 2c 20 63 6f 6e 73 65 63 74 65 74 75 72 20 61 64 69 70 69 73 63 69 6e 67 ... 713 more bytes>


**2	+ utf8
---

fs.readFile("sample.txt", "utf8", function (err, data) {
    console.log(data);
});

---
	출력.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam ligula sapien, rutrum sed v...

//신버젼
fs.readFile("읽을 파일명.확장자", "utf8", (err, data) => {});



	#13.	#12에 해본걸 적용시켜보기.
	**1
 data/폴더 밑에 HTML , CSS , JavaScript 각각 파일을 만들고 <p>태그 내용을 복붙하기.


	**2
 >> # 읽어온 queryData.id값에 해당하는 파일명의 내용을 읽어와 적용시키기.
---

 fs.readFile(`data/${queryData.id}`, "utf8", function (err, description) {
	var template = `
      	<!doctype html>
      	<html>
      	<head>
         <title>WEB1 - ${title}</title>
        <meta charset...
	<p>
	 ${description}
	</p>
	...
	`;

---
 역할 해석.
 fs.readFile(`data/${queryData.id}`, "utf8", function(err, 내용){
	var template = `
	..
	 <p>
	  ${description}
	 </p>
	..
	`;
 });

 - fs.readFile()  파일을 읽어온다.
 - `data/${queryData.id}`	>> data/HTML
				>> data/CSS
				>> data/JavaScript

	url.parse(_url, true).query = queryData 값을 받아온다.
	queryData.id 값을 읽어온다.

 - function(err, description){
	..
	 ${description}
	..
   }
	description변수는 해당 파일 내용을 가져온다.


	#14. Boolean
	참true. 과 거짓false.
Boolean을 다루기위한 Comparison operator(비교 연산자) , Conditiononal statement(조건문).


console.log(1 == 1); //true
console.log(1 == 2); //false
console.log(1 > 2); //false
console.log(2 >= 1); //true

*
비교연산자
 == , === 로 나눌 수 있는데 세세하게 비교시에는 우측(===)을 사용한다.
 =(대입연산자)

이유:?
 > ..
==는 Equal Operator , ===는 Strict(엄격한) Equal Operator
==은 단순히 값을 비교해서 true/false를 출력하고
===은 값과 값의 종류(Data Type)을 비교해서 true/false를 출력한다.

[출처](https://steemit.com/kr-dev/@cheonmr/js-operator)


	#15. 제어문
Program란?
 > 시간순서에따라 진행되는 절차.순서를 프로그램이라고 한다.



	#16. 조건문
??
 > 조건에 따라 프로그램의 흐름을 제어하는 방식.


	#17. 콘솔 입력값 (IO)

input	>>	JS	>>	output
동의어
Parameter(형식)			
Argument(매개변수)

검색?
 > nodejs console input parameters
 > https://stackoverflow.com/questions/4351521/how-do-i-pass-command-line-arguments-to-a-node-js-program
	**1
---

var args = process.argv;
console.log(args);

---
Cmd
node Comparison.js egoing
 출력
[  
  'C:\\Program Files\\nodejs\\node.exe',		  // node.js 런타임이 어디에 위치한지 정보
  'C:\\GitLog\\Git\\web2-node-js\\syntax\\Comparison.js', // 해당 파일을 실행시키는 위치정보
  'egoing'						  // 입력값을 표시
]

3번째 정보부터 입력된 정보 가져온다.
0 1 2번.

	**2
---

var args = process.argv;
console.log(args[2]);

---
Cmd
node Comparison.js egoing
 출력
egoing
이 나타난다.

	**3
---

var args = process.argv;
console.log(args[2]);

if (args[2] === "1") {
    console.log("문자 1 true");
} else {
    console.log("문자= " + args[2] + " false");
}

---
[2]번째 값에따라 1일 경우 true / 그외는 false를 처리하는 조건문을 만들 수 있다.



	#18 not found

console.log(url.parse(_url, true).pathname);
url이 가진 정보를 보여준다.[]로

var pathname = 경로를 나타는 변수.
if (pathname === "/") {
        // path가 없는 경로 접속시 해당 내용을 출력
else {
        // "/"가 없을시 404NotFound 출력.

response.writeHead(000);
200 - 성공적으로 전송
404 - 파일을 찾을 수없는 전송



	#19 대문 구현.
맨 처음 localhost:3000일시 undefined(없는 값)이 뜨는걸 볼 수 있는데
이는 해당값이 없어서 undefined이 뜬다.

queryData.id === undefined이라는 조건을 걸어서 해당값일경우 
title / decription 값을 정해줘서 `${}`에 넣어주고

그렇지않을경우
html / css /js내용을 출력해준다.



	#20 반복문
for문과 while문
// for문
for (초기값; 한계값; 증감) {

}

// while문
while (조건이 true일시 반복) {

}


	#21 배열Array
['값1','값2','값3'...]해서 넣어주면된다.
var arr = ['a','b','c']

consol.log(arr[1]);
// 0부터 시작.


	#22 ArrayLoop
// Array & Loop
var number = [1, 400, 22, 34];
var i = 0;
let total = 0;
while (i < number.length) {
    total = total + number[i];
    console.log(number[i]);
    i++;
}

console.log(`total : ${total}`);
// 배열의 크기만큼 반복.



	#22 nodejs 파일목록 확인.
nodejs file list in dir..
> https://stackoverflow.com/questions/2727167/how-do-you-get-a-list-of-the-names-of-all-files-present-in-a-directory-in-node-j/2727191

>>
---

const testFolder = './tests/';
// 파일 위치가 아닌 실행하는 위치의 데이터dir경로.
const fs = require('fs');
 
fs.readdir(testFolder, function (error, filelist) {
    console.log(filelist);
});

---
node node.js/readdir.js 명령어 입력시 
> ['CSS','HTML',JavaScript]가 뜬다.
> node.js폴더에 실행시에는 undefined가 뜬다. >> testFolder의 변수가 실행하는 위치에서 하위를 읽는데 상위는 못읽는거 같



	#23 nodejs 글목록 출력.
태그로 고정되어있는 list를 nodejs로 파일 읽고 해당내용으로 출력.
---원본

<ol>
 <li><a href="/?id=Html">HTML</a></li>
 <li><a href="/?id=Css">CSS</a></li>
 <li><a href="/?id=JavaScript">JavaScript</a></li>
</ol>
  
---
---수정

var list = `<ul>`;
var tegcount = 0;
while (tegcount < filelist.length) {
  list = list + `<li><a href="/?id=${filelist[tegcount]}">${filelist[tegcount]}</a></li>`;
  tegcount = tegcount + 1;
}
list = list + `</ul>`;

---
1. list라는 변수 시작과 끝에 <ul>태그를 넣은 후 
2. while 증감 반복문을 사용. tegcount는 반복횟수를 의미함.
3. 	'./data'에 읽어온 파일목록 배열을 filelist에 담은 상태에서
 > 
 <조건문> (tegcount < filelist.length)
기존의 list변수 <li>태그를 넣고 filelist[]배열에 담긴걸 tegcount만큼 반복한다. 
 list = list + `<li><a href="/?id=${filelist[tegcount]}">${filelist[tegcount]}</a></li>`;


이상태에서 아무파일이나 추가하고 cmd node를 실행하면 
list에 추가된걸 볼 수 있다.




	#24 function 함수.
//선언
function 함수명(매개변수){
	// parameter 파라미터
	실행코드;
    	return 변수;
    	// 반환
    	// 함수의 결과값을 반환한다.
	// return이 선언시 함수는 즉시 종료된다.
}
//실행
함수명(값); // argument 인자



	#25 동기syncrhonous / 비동기asynchronous

	동기
	0 >> 0 >> 0 >> 0 >>

	비동기 (sync)
	0 >> 1 >> 1 >> 1 
	     0 >> 0 >> 0


> https://nodejs.org/dist/latest-v16.x/docs/api/fs.html#fsreadfilepath-options-callback



1. 동기 : fs.readFileSync('읽고자하는파일명')
console.log("- 출력확인 용 로그 -");
var result = fs.readFileSync("syntax/sample.txt", "utf-8");
console.log(result);
console.log("C");

- 출력확인 용 로그 -
B
C


2. 비동기 : fs.readFile('읽고자하는파일명', callback(){});
console.log("- 출력확인 용 로그 -");
fs.readFile("syntax/sample.txt", "utf-8", function (err, result) {});
console.log(result);
console.log("C");

/* 파일 읽는 작업을 마친 후 function의 에러가 있는지 확인후 결과를 도출한다.*/

- 출력확인 용 로그 -
C
B


- 비동기는 특정 변수에 넣어 처리가능하지만. 동기는 특정변수가 아닌 함수로 작동한다.
- 동기는 순차적으로 처리하는것에 비해 비동기는 비순차적으로 먼저 결과 나온대로 출력되는걸 볼 수 있다



	#26 callback
js에서는 함수가 값이다.??
function a() {
    console.log("일반 함수");
}
var a = function () {
    console.log("익명함수");
};


a();
두가지 함수가 있는데 첫번째는 일반적 함수이고 두번째는 함수명이 따로 없는 익명 함수이다. 익명함수를 호출하기 위해서는 
변수값을 지정해서 할 수 있는데, 위쪽 function a(){}와 변수a 익명함수는 둘다 a();로도 불러올 수 있다. 



function(){}단계에서 해당 기능을 종료후 다음에 그 다음일을 진행할때 callback을 선언하기.
---

var a = function () {
    console.log("익명함수");
};
function slowfunc(callback) {
    callback();
}
slowfunc(a);

---
 > slowfunc()함수가 실행 후 종료되면 callback으로 다음을 실행한다.
 > slowfunc(a)이니 함수가 종료되면 a를 실행한다.
 > a인 "익명함수"가 출력된다



	#27 nodejs와 패키지매니저 PM2
https://pm2.keymetrics.io/( PM2 )
 > 패키지? 소프트를 부르는 표현 / 독립적 프로그램 / 프로그램의 톱니중 하나.
 >> NPM
  >npm install pm2 -g	설치.
		    (-g : 독립된 소프트웨어)

  > pm2 start main.js

┌─────┬─────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id  │ name    │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
├─────┼─────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤
│ 0   │ main    │ default     │ N/A     │ fork    │ 21500    │ 0s     │ 0    │ online    │ 0%       │ 31.3mb   │ jeong    │ disabled │
└─────┴─────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘
이런식으로 현재 사용상태를 표시해준다.


 > pm2 monit
 > 현재 pm2에 의해 실행되고있는걸 보여준다.

 > pm2 start main.js --watch(옵션)
 > 수정할때마다 적용되는걸 확인하기위해 nodejs를 껃다 키는걸 안해된다.

 > pm2 log
 > 수정사항이 있을시 기록을 보여준다.

 > pm2 stop main.js
 > main.js를 멈춘다.




	#28 Form

<form action="https://localhost:3000/process_create">
    <p><input type="text" name="title" /></p>
    <p><textarea cols="30" rows="10" name="description"></textarea></p>
    <p><input type="submit" value="제출" /></p>
</form>

 >> html태그를 하나의 단위로 묵어서 전송하기 위해 Form으로 묶는다.
 >> 주소창에 https://localhost:3000/process_create?title=hi&description=hello
  >> action은 데이터가 보내질 주소
  >> ?title값/ description값을 받을걸 확인할 수 있다.


하지만 주소창에 저렇게 값이 노출될시 보안상 문제 및 데이터 처리에 있어 좋지않다.
따라서, 보내되 보이지않게 처리해야한다.

method="post"  // GET방식 과 POST방식.
 서버로부터 사용자가 데이터를 받아 올때는 GET방식
 사용자가 서버로 데이터를 전송할때는 POST방식을 쓰는게 일반적이다.


	#29 글생성 UI

templateHTML에서 
    ${list}
    <a href="/create">create</a> (추가)
    ${body}

 >> 템플릿html에 작성한거라 다른 html에도 당연히 적용된다.
 >> 이동시 http://localhost:3000/create
 >> http.createServer(){}로 이어진다.

else에서 조건을 하나 더 추가하여 else if(pathname이 "/create"일시 동작.){} 


기존에 만들어둔 fs.readdir...}); 부분을 복사한 뒤 else if(){}에 넣고
만들어둔 form을 body에 넣는다.

그다음 각각 내용을 넣고 크롬 개발자 - Network를 킨 상태에서 submit을 하면 404가 뜨면서 Header옆 paylod에 
각각의 값이 전송되었던걸 확인할 수있다.


	#30 POST방식으로 전송된 데이터 받기

else if (pathname === `/create_process`) {
      response.writeHead(200);
      response.end("success post");
을 걸어 submit했을 시 정상적으로 동작하는 지 확인. success post가 출력되면 정상적으로 동작.
 >> https://로 하면 404가 터진다. 몰?루


how do you extract post data in node.js postdata를 출력하는지?
https://stackoverflow.com/questions/4295782/how-to-process-post-data-in-node-js
---

var qs = require('querystring');

function (request, response) {
    if (request.method == 'POST') {
        var body = '';

        request.on('data', function (data) {
            body += data;

            // Too much POST data, kill the connection!
            // 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
            if (body.length > 1e6)
                request.connection.destroy();
        });

        request.on('end', function () {
            var post = qs.parse(body);
            // use post['blah'], etc.
        });
    }
}

---
var request역할
 - http.createServer(function (request, response) {...
  >> .createServer에 전달된 callback함수. 
  nodejs로 웹브라우저가 접속이 들어올때마다 
  .createServer의 callback함수를 node.js가 호출한다. 이때 그 함수에 인자를 두개 준다.
  	>> request에는 요청할때 웹브라우저가 보낸 정보
 	>> response는 응답할때 사용자가 웹브라우저에 보내는 정보.

 - request.on(`data`, function (data) {});
	>> 웹브라우저가 post방식으로 데이터를 전송할때, 데이터가 많을시. 한번에 처리할때 컴퓨터가 멈추거나 꺼지는 경우를 대비해서.
	>> 조각조각 양의 서버쪽에서 수신할때마다 callback함수를 호출하도록 약속되어있다. 그리고 호출할때마다 data라는 인자를 통해 수신한 정보를 주기로 되어있다.
	>> body = body + data;
	  >>> callback이 실행될때마다 data가 추가된다.

	>> if (body.length > 1e6)
                request.connection.destroy();
	  >>> 만약 전송한 데이터가 너무 클시 접속을 끊어버리는 보안장치이다.
	  >>>   // Too much POST data, kill the connection!
            	// 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
 - request.on(`end`, function () {});
	 >> 더이상 들어올 정보가 없을시 `end` callback함수를 호출하도록 약속되어있다.
	 >>  var post = qs.parse(body);	

	 >> var qs = require('querystring');
	   >>> node.js의 모듈을 가져오는 걸 알 수있다.
	   >>> 모듈? 

 - 전송시 pm2 log에  [Object: null prototype] { title: 'node', description: 'nodejs is..' }으로 출력된다.
  > 즉, post.title = `node` , post.description = `nodejs is...`값으로 이루어진 객체화로 알 수 있다.
  >
fs.readdir("./data", function (error, filelist) {
                //list
                var list = listHTML(filelist);
                // html
                var template = templateHTML(
                    title,
                    list,
                    `
                <h2>${title}</h2>
                <p>
                ${description}
                </p>
                `
                );
                response.writeHead(200);
                response.end(template);
            });

룰 바로 밑에 붙여주고 templateHTML(,,body){} body에 해당 값 title과 description을 넣어주면 post된 값을 페이지에 출력할수있다.
 



	#31 delete
update와 동일하게 가되 
a태그로 구현하면 안된다.
 >> 주소로 구현할 경우. 



과거, 주소를 클릭시 해당으로 빠르게 이동하게 미리 웹페이지를 이동하는 캐싱. 이있는데.
delete를 Get방식으로 구현해놓았다.주소를 활용해서 아무 파일이나 페이지가 삭제되는 악용사례가 있다.
 >> form문으로 구현.


https://stackoverflow.com/questions/5315138/node-js-remove-file
fs.unlink(path, callback)

fs.unlink(`data/${id}`, function (error) {
                response.writeHead(302, {
                    Location: `/`,
                });
                // 삭제시 홈으로 보내기.
                response.end();
            });



	#32 Object 객체. 
정리정돈하는 도구.
array는 데이터를 순서대로 정리된다. 고유식별자가 부여되면 0,1,2,3,4...
object는 순서없이 정리되어있고 이름으로 식별자를 줄 수 있다.

ex_
// arrray
var members = [`egoing`, `k7705`, `hoya`];
console.log(members[0]);
console.log(members[2]);

// object
var roles = {
    program: "egoing",
    language: "js",
    platform: "internet",
};
console.log(roles.program);
console.log(roles.language);

---
// arrayLoop
var i = 0;
while (i < members.length) {
    console.log("arrayLoop :", members[i]);
    i++;
}
// object
for (var name in roles) {
    console.log("object :", name, "value :", roles[name]);
}


var name자리에는 key값이 들어가도록 되어있다.
value값을 불러오려면 객체명[name]으로 불러올 수 있다.



	#33 객체값으로서 함수 object oriented programming
함수는 처리야되는 일에대한 구문statement, 동시에 값
 > 함수를 변수에 넣어서 할 수있다.
ex_
---

function f1() {
    console.log("함수입니다.,");
}

console.log(f1); // function : f1
f1(); //함수 실행.

---


	또 배열에 원소(구성원으로) 함수가 존재할 수 있다.
---

function f() {
    console.log("배열속 함수.");
}

var a = [f];
a[0]();

---
	객체속 함수로 선언할 수 있다.
---

var o = {
    func: f,
};

o.func();


---



	#33 데이터와 처리 방법을 담는 그릇으로서 객체.
---

var o = {
    v1: `v1`,
    v2: `v2`,
    f1: function () {
        //고로 객체로 묶어놓아야한다.
        console.log(o.v1);
    },
    f2: function () {
        console.log(o.v2);
    },
};

---
1. 
같은명의 함수가 선언시
동일함수는 없는거나 다름없게 된다.

2.
 f1: function () {}
고로 객체로 묶어놓아야한다.

3. 만일 위 식처럼 변수명을 사용해서 함수를 사용하는데
변수명이 바꿔 사용못하여 일일 다 바꿔줄 필요없이 
함수선언을 this.으로 자신을 가리키는 약속어를 쓴다.



	#34 template 재정립.
template.list
template.html

동작은 동일하게 하면서 코드 가독성을 높이거나 재정립하는걸 refactoring

function ..으로 정의되어있는걸.

var tempalte ={
	html:function()...,
	list:function()...,
	
}
이런식 객체화 시키고. 선언시 template.html등으로 재정립한다.
재정립은 단계단계를 거치면서 하고 처음부터 완전을 꿈꾸지말고 여러번 시도해보면서 배운점을 적용시켜봐야한다.




	#35 Module 모듈.
객체도 추가하면 가독성이 떨어지니 하나의 독립 파일로 구분해서 쪼개서 관리.

// module 바깥에서 사용 = 그 대상.
module.exports = M;

// module수신해서 받아오기.
var part = require(`./mPart.js`);
  > [v: `v` , f: function]으로 객체로 받아온다.

//실행
part.f();


main.js에 적용.
var tempalte ={
	html:function()...,
	list:function()...,
}을 lib/ template.js로 옮기고

template 변수명 대신  module.exports로 선언.

main.js엔 require(`./lib/template.js`); 로 불러온다.