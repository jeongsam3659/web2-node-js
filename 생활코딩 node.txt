오후 6:38 2022-01-05

//경로
C:\GitLog\Git\web2-node-js

---

#1
web application
<<<
html
<<<
web Browser

web에서 html을 활용하여 web applicationd을 만든다.

이와 동일하게

#2
Node.js application
<<<
js
<<<
Node.js runtime

Node.js runtime에서 js을 활용하여 Node.js application을 만든다.

---		---		---		---

#3
window설치

	1.
https://nodejs.org/ko/
LTS를 다운로드 받는다고 설치 (설치경로 확인)

	2.
window + r  +cmd창을 표시

	3.
node -v 
버젼이 나오면 설치가 된걸 확인할 수 있다.
또는
node를 입력 후 간단한 js를 통해 설치된걸 확인 할 수 있다.
ex_)
console.log(1+3);

	4.
cmd node node파일을 입력하면 
node파일의 결과값이 cmd창에 출력된다.

---		---		---		---

#4.
예제파일들을 실행구역에 복사하고

main.js에 해당 내용을 기입.
---
var http = require("http");
var fs = require("fs");
var app = http.createServer(function (request, response) {
    var url = request.url;
    if (request.url == "/") {
        url = "/index.html";
    }
    if (request.url == "/favicon.ico") {
        return response.writeHead(404);
    }
    response.writeHead(200);
    response.end(fs.readFileSync(__dirname + url));
});
app.listen(3000);
---
한뒤 node main.js로 실행. 브라우저 localhost:3000하면 해당 웹페이지가 가동된다.
cmd ctrl + c하면 node종료

---		---		---		---

#5.
	__dirname + url
 
console.log();를 통해 역할파악
	#1. 출력
C:\GitLog\Git\인프런\node.js/index.html
C:\GitLog\Git\인프런\node.js/3.html

사용자가 요청할때마다(html나 css, js를 클릭시)
디렉토리 경로와 함께 파일명이 불려오고 fs.readFileSync가 읽어서
출력을 response.end에 위치시키는걸 알 수 있다.

response.end("fileName :" + url); 라고 변경하고 실행시

브라우저에
fileName :/3.html
만 출력되는걸 확인할 수 있다.

---		---		---		---

오후 3:08 2022-01-06
#6.

 	DATA Type
폴더Syntax에 문법관련이 들어갈 예정.

	Number
JS에서 숫자는 다른 표시없는 숫자가 Number이다.
	
	String
'', ""로 문자를 묶으면 문자열이 된다.
글자수 확인 - string.length

	변수 Variable
a = 1;
js에서는 변수선언시 따로 타입선언 없어도 자동으로 적용.
과거에는 var
하지만 let(변수) / const(상수)를 붙혀주는게 좋다.

	Template Literal
	(과거)
	\ 
문자열 내에서 \는 TAB(탭)과 동일한 기능으로.
	\n\
줄바꿈을 나타내는 기호
	
	(현재)
	리터널 `(~ 과 같이있는 그레이브 엑센트)
ex_
`Dear ${client} 

Lorem ipsum dolor sit amet,consectetur adipisicing elit. ...`

변수는 ${변수} 또는 식을 ${1+2}.
이런식으로 따로 \n나 +변수+를 추가시키는 것없이 형태 그대로를 출력할 수 있게된다.

---		---		---		---

#7. 	URL이해

http:// opentutoials.org:3000/main?id=HTML&page=12

	http - protocol
	통신규칙
사용자가 서버에 접속할때 어떤방식으로 통신할건지 규칙

	opentutoials.org
	호스트, 도메인
특정 주소를 가리킨다.

	:3000
	포트번호 
클라이언트가 접속할때 3000번 포트에 연결된 서버와 연결한다는뜻.

	main
	path
서버컴퓨터의 어떤? 디렉토리 어떤? 파일인지 가르키는 것.

	?id=HTML&page=12
	query string
시작은 ?로 하고
값 과 값사이에는 엔퍼센트(&)로 구분하고
키 과 값은 =으로 표시.(key=value)


#8. 	URL (1)
nodejs url parse query string

var queryData = url.parse(_url, true).query;
로 어떻게 구성되어있는지 확인.


#11.	동적페이지
	1. resonse.write밑에
var template = `
 (1.html내용)
`
내용을 넣고 HTML이라고 표기되있는 타이틀과 h2부근을 ${queryData.id}을 교체후

	2. response.end(template);

	3. localhost:3000 창을 띄우면 1.html 비슷하게 나오고 ${}자리는 undefined로 표시된다.
 3000/?id=HTML 로 입력시 ${}는 HTML으로 바뀌는걸 확인할 수 있다.

	4. li에 담긴 a태그 경로를 수정하여.
	1.html > /?id=Html
	2.html > /?id=Css
	3.html > /?id=JavaScript
다시 실행보면 
${}자리가 해당 a태그를 클릭한 값대로 변화는걸 알 수있다.

	5. 변수를 좀더 알아보기 쉽게 재정의
var title = queryData.id,
${title}

	6. h1 a태그 경로를 "/" 로 수정. 이렇게 될시 첫번째 조건문에 해당됨.
첫번째 조건문( _url == "/" ) true일시
title = "Welcome"으로 수정 후 실행하면 h1태그에 Welcome이 뜨는걸 볼수 있다.

>> 이렇게 할시 하나하나html 수정하지 않고도 한곳만 변경하여 유지보수 및 재사용이 쉬워진다.


#12.	CRUD
	Create
	Read
	Update
	Delete의 약자. 정보시스템을 다루는 핵심적 구성.

https://nodejs.dev/learn/reading-files-with-nodejs

const fs = require("fs");

**1	//구버젼
---
	
fs.readFile("sample.txt", function (err, data) {
	console.log(data);
});

---
	출력.
<Buffer 4c 6f 72 65 6d 20 69 70 73 75 6d 20 64 6f 6c 6f 72 20 73 69 74 20 61 6d 65 74 2c 20 63 6f 6e 73 65 63 74 65 74 75 72 20 61 64 69 70 69 73 63 69 6e 67 ... 713 more bytes>


**2	+ utf8
---

fs.readFile("sample.txt", "utf8", function (err, data) {
    console.log(data);
});

---
	출력.
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam ligula sapien, rutrum sed v...

//신버젼
fs.readFile("읽을 파일명.확장자", "utf8", (err, data) => {});



#13.	#12에 해본걸 적용시켜보기.
	**1
 data/폴더 밑에 HTML , CSS , JavaScript 각각 파일을 만들고 <p>태그 내용을 복붙하기.


	**2
 >> # 읽어온 queryData.id값에 해당하는 파일명의 내용을 읽어와 적용시키기.
---

 fs.readFile(`data/${queryData.id}`, "utf8", function (err, description) {
	var template = `
      	<!doctype html>
      	<html>
      	<head>
         <title>WEB1 - ${title}</title>
        <meta charset...
	<p>
	 ${description}
	</p>
	...
	`;

---
 역할 해석.
 fs.readFile(`data/${queryData.id}`, "utf8", function(err, 내용){
	var template = `
	..
	 <p>
	  ${description}
	 </p>
	..
	`;
 });

 - fs.readFile()  파일을 읽어온다.
 - `data/${queryData.id}`	>> data/HTML
				>> data/CSS
				>> data/JavaScript

	url.parse(_url, true).query = queryData 값을 받아온다.
	queryData.id 값을 읽어온다.

 - function(err, description){
	..
	 ${description}
	..
   }
	description변수는 해당 파일 내용을 가져온다.


	
































